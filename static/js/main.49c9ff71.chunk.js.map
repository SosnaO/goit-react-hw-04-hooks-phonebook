{"version":3,"sources":["components/Filter/filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactList/contactListItem.module.css"],"names":["module","exports","ContactListItem","name","number","id","onDelete","className","styles","contactListItem","contact","buttonDelete","type","onClick","ContactList","contacts","map","ContactForm","onSubmit","useState","setName","setNumber","shortid","generate","handleChange","event","target","value","reset","form","preventDefault","formLabel","formInput","pattern","title","required","onChange","buttonSubmit","Filter","filterLabel","filterInput","App","setContacts","filter","setFilter","useEffect","localStorage","getItem","JSON","parse","prevState","setItem","stringify","changeFilter","element","currentTarget","visibleContacts","toLowerCase","includes","phonebook","data","find","alert","contactId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49c9ff71.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"filter_filterLabel__1ELcq\",\"filterInput\":\"filter_filterInput__1Mv-I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"phonebook\":\"ContactForm_phonebook__AG-47\",\"form\":\"ContactForm_form__2Wa-W\",\"formLabel\":\"ContactForm_formLabel__2ZdLQ\",\"formInput\":\"ContactForm_formInput__20KDF\",\"buttonSubmit\":\"ContactForm_buttonSubmit__3FmAR\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './contactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, number, id, onDelete }) => (\r\n  <li className={styles.contactListItem}>\r\n    <p className={styles.contact}>\r\n      {name}: {number}{' '}\r\n    </p>\r\n    <button\r\n     className={styles.buttonDelete}\r\n      type=\"button\"\r\n      onClick={() => onDelete(id)}\r\n    >\r\n      Delete\r\n    </button>\r\n  </li>\r\n);\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;","import React from \"react\";\r\nimport ContactlistItem from './ContactListItem'\r\nimport PropTypes from 'prop-types';\r\n    const ContactList = ({ contacts, onDelete }) => (\r\n        <ul>  \r\n        {contacts.map(({ name, number, id }) => ( \r\n         <ContactlistItem \r\n         key={id}\r\n         id={id}\r\n         name={name}\r\n         number={number}\r\n         onDelete={onDelete}\r\n        />\r\n         ))}\r\n        </ul>\r\n    );\r\n    ContactList.propTypes = {\r\n        contacts: PropTypes.array.isRequired,\r\n        onDelete: PropTypes.func.isRequired,\r\n      };\r\n    \r\n  export default ContactList;","import { useState } from 'react';\r\nimport shortid from 'shortid'\r\nimport styles from './ContactForm.module.css'\r\n\r\nexport default function ContactForm({onSubmit}) {\r\n    const [name, setName]= useState('');\r\n    const [number, setNumber]= useState('');\r\n\r\n    const id=shortid.generate();\r\n       const handleChange=event=>{\r\n       const { name, value } = event.target;\r\n       switch (name){\r\n           case 'name':\r\n           setName(value);\r\n           break;\r\n         case 'number':\r\n             setNumber(value);\r\n             break;\r\n             \r\n             default:\r\n                 return;\r\n       }\r\n     };\r\n      \r\n     const handleSubmit=event=>{\r\n      event.preventDefault();\r\n      onSubmit({ name, number, id });\r\n      reset();\r\n     };\r\n     const reset = () => {\r\n      setName(\"\");\r\n      setNumber(\"\");\r\n     };\r\n\r\n    return(\r\n        <form  className={styles.form} onSubmit={handleSubmit}>\r\n        <label className={styles.formLabel}>Name\r\n        <input className={styles.formInput}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        id={shortid.generate()}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        value={name}\r\n        onChange={handleChange}\r\n        />\r\n        </label>\r\n\r\n        <label className={styles.formLabel} >Number\r\n            <input className={styles.formInput}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n       id={shortid.generate()}\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        value={number}\r\n        onChange={handleChange}\r\n        />\r\n        </label>\r\n        <button className={styles.buttonSubmit} type=\"submit\">Add contact</button>\r\n        </form>\r\n        )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// old code\r\n\r\n// class ContactForm extends Component{\r\n//     state = {\r\n//         name: '',\r\n//         number: ''\r\n//      }\r\n    //  nameInputId=shortid.generate();\r\n    //  numberInputId=shortid.generate();\r\n\r\n    // handleChange=event=>{\r\n    //    const {name, value}= event.currentTarget;\r\n    //    this.setState({id: shortid.generate(),[name]: value})\r\n    // };\r\n  \r\n    // handleSubmit=event=>{\r\n    //  event.preventDefault();\r\n    //  this.props.onSubmit(this.state);\r\n    //  this.reset();\r\n    // };\r\n\r\n    // reset = () => {\r\n    //   this.setState({ name: '', number: '' });\r\n    // };\r\n    // render(){\r\n    //     return(\r\n    //     <form  className={styles.form} onSubmit={this.handleSubmit}>\r\n    //     <label className={styles.formLabel} htmlFor={this.nameInputId}>Name\r\n    //     <input className={styles.formInput}\r\n    //     type=\"text\"\r\n    //     name=\"name\"\r\n    //     id={this.nameInputId}\r\n    //     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n    //     title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n    //     required\r\n    //     value={this.state.name}\r\n    //     onChange={this.handleChange}\r\n    //     />\r\n    //     </label>\r\n\r\n    //     <label className={styles.formLabel} htmlFor={this.numberInputId}>Number\r\n    //         <input className={styles.formInput}\r\n    //     type=\"tel\"\r\n    //     name=\"number\"\r\n    //    id={this.numberInputId}\r\n    //     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n    //     title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n    //     required\r\n    //     value={this.state.number}\r\n    //     onChange={this.handleChange}\r\n    //     />\r\n    //     </label>\r\n    //     <button className={styles.buttonSubmit} type=\"submit\">Add contact</button>\r\n    //     </form>\r\n    //     )\r\n//     }\r\n// }\r\n// export default ContactForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './filter.module.css'\r\n\r\nconst Filter =({ value, onChange }) => (\r\n    <label className={styles.filterLabel}>\r\n        Find contacts by name \r\n      <input className={styles.filterInput} type=\"text\"\r\n      value={value}\r\n      onChange={onChange}\r\n      />\r\n     </label>\r\n);\r\nFilter.propTypes = {\r\n    value: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n  };\r\nexport default Filter;","import { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactList from './components/ContactList/ContactList'\nimport ContactForm from './components/ContactForm/ContactForm'\nimport Filter from './components/Filter/Filter'\nimport styles from './components/ContactForm/ContactForm.module.css'\n    export default function App(){\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] =useState('');\n\n  useEffect(() => {\n    if (localStorage.getItem('contacts')) {\n      setContacts(JSON.parse(localStorage.getItem('contacts')));\n    }\n  }, []);\n\n  useEffect(\n    prevState => {\n      if (contacts !== prevState) {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n      }\n    },\n    [contacts],\n  );\n    const changeFilter = element => {\n    setFilter(element.currentTarget.value);\n  };\n  const deleteContacts = contactId =>{\n    setContacts(() =>(\n    contacts.filter((contact)=>contact.id !==contactId)\n    ));\n  };\n   const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n  const formSubmitHandler = data => {\n    if (contacts.find(contact => contact.name === data.name)) {\n      alert(`${data.name} is already in contacts`);\n      return;\n    }\n    setContacts(prevState => [data, ...prevState]);\n  };\n\n  return (\n    <div className={styles.phonebook}>\n    <h1>Phonebook</h1>\n    <ContactForm\n    onSubmit={formSubmitHandler}\n    />\n    <h2>Contacts</h2>\n  <Filter value={filter} onChange={changeFilter} />\n  <ContactList\n  contacts={visibleContacts}\n  onChange={changeFilter}\n  onDelete={deleteContacts} /> \n  </div>\n  );\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"contactListItem_contactListItem__3QpNt\",\"contact\":\"contactListItem_contact__2oxbL\",\"buttonDelete\":\"contactListItem_buttonDelete__SDqLq\"};"],"sourceRoot":""}